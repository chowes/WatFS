syntax = "proto3";

package watfs;

service WatFS {
    // basically just works like a ping, no work is done
    rpc WatFSNull (WatFSStatus) returns (WatFSStatus) {}

    // get object attributes
    rpc WatFSGetAttr (WatFSGetAttrArgs) returns (WatFSGetAttrRet) {}

    // lookup an object and return a file handle
    rpc WatFSLookup (WatFSLookupArgs) returns (WatFSLookupRet) {}

    // TODO: change this to use a stream
    rpc WatFSRead (WatFSReadArgs) returns (stream WatFSReadRet) {}

    rpc WatFSWrite (stream WatFSWriteArgs) returns (WatFSWriteRet) {}

    rpc WatFSReaddir (WatFSReaddirArgs) returns (WatFSReaddirRet) {}

    rpc WatFSCommit (WatFSCommitArgs) returns (WatFSCommitRet) {}
}


/* NULL */

/*
 * Right now just used to implement the NULL call, not sure if this will have
 * any practical use. I only bothered to implement it as a starting point.
 */
message WatFSStatus {
    int32 status = 1;
}

/* GETATTR */ 

/*
 * All we need to send is the file path
 */
message WatFSGetAttrArgs {
    string file_path = 1;
}

/*
 * Server sends back the results of a call to stat in attr, and sets err to the
 * value of errno if there is an error. This field will be 0 in the non-error
 * case. 
 */
message WatFSGetAttrRet {
    // cast to struct stat *
    int32 err = 1;
    bytes attr = 2;
}

/* LOOKUP */ 

/*
 * Client sends the file handle of the containing directory, and the file 
 * handle as a string
 */
message WatFSLookupArgs {
    string dir_handle = 1;
    string file_name = 2;
}

/*
 * Server replies with a file handle for the requested object (can be either
 * a file or a directory), the attributes of the requested object, and the
 * attributes of the containing folder
 */
message WatFSLookupRet {
    string file_handle = 1;
    bytes file_attr = 2;
    bytes dir_attr = 3;
    int32 err = 4;
}

/* READ */

message WatFSReadArgs {
    string file_handle = 1;
    int32 offset = 2;
    int32 count = 3;
}

message WatFSReadRet {
    bytes file_attr = 1;
    int32 count = 2;
    bool eof = 3;
    bytes data = 4;
    int32 err = 5;
}

/* WRITE */

message WatFSWriteArgs {
    string file_handle = 1;
    int32 offset = 2;
    int32 count = 3;
    bool flush = 4;
    bytes data = 5;
}

message WatFSWriteRet {
    bytes file_attr = 1;
    int32 count = 2;
    bool commit = 3;
    int32 err = 4;
}

/* READDIR */

message WatFSReaddirArgs {
    string file_handle = 1;
    int32 cookie = 2; // necessary? maybe use a stream?
    int32 cookie_verf = 3;
    int32 count = 4;
}

message WatFSReaddirRet {
    bytes dir_attr = 1;
    bytes data = 2;
    bool eof = 3;
    int32 err = 4;    
}


/* COMMIT */

// these will probably change
message WatFSCommitArgs {
    bool commit = 1;
}

message WatFSCommitRet {
    bool success = 1; 
}
